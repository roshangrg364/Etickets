@model ETicketing.ViewModels.MovieCategory.MovieCategoryUpdateViewModel

@{
    ViewData["Title"] = "Update  category";
}

<div class="row text">
    <div class=" card col-md-8 offset-2">
       <div class="col-md-12">
            <div class="card-header">
                <h4>@ViewData["Title"] </h4>
            </div>
        <div class="row">
            <div class="col-md-12">
                <form id="updateForm" enctype="multipart/form-data">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <input asp-for="Id" hidden />
                   
                    <div class="form-group  mt-2">
                        <label  class="control-label">  Name</label>
                        <input asp-for="Name" class="form-control" />
                        <span asp-validation-for="Name" class="text-danger"></span>
                    </div>
                   

                    <div class="card-footer text-muted  mt-2">
                         <button type="submit"  class="btn btn-outline-success float-right"><i class="bi bi-check-circle-fill"></i> Update</button>
                        <a class="btn btn-outline-secondary" asp-action="Index"><i class="bi bi-arrow-left-circle-fill"></i> Back</a>
                 
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
</div>

@section scripts{
<script>
    const categoryForm = document.getElementById("updateForm");

    async function EditCategory(){
       try
       {
           const id = document.getElementById("Id").value;
           const url =`/api/categories/${id}`;
            const data ={
                Name:document.querySelector("#Name").value
                 };
            const options ={
                  method: "put",
                 headers: {
                  "Content-Type": "application/json"
                 },
                 body:JSON.stringify(data)
            };


            const response= await fetch(url,options);
                if(!response.ok){
                  throw new Error( await response.text());
           
                }
            const resdata=await response.json();
               return resdata;
       }
           
      catch(error){
           throw error;  
      }
        
    }
    categoryForm.addEventListener('submit',async(e)=>{
         e.preventDefault();
         try{
            const data= await EditCategory();
                 Swal.fire({
                        title: 'Success!',
                        text: data,
                        icon: 'success',
                        showConfirmButton: true,
                      
                        });

                 setInterval(()=>{ window.location.href="/moviecategory/index"},1000);
         }
          catch(error){
           
              Swal.fire({
                        title: 'Error!',
                        text: error,
                        icon: 'error',
                        showConfirmButton: true,
                      
                        });     
      }
      
    })

</script>
}

